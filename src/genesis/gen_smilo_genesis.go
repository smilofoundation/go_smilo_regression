// Copyright 2020 smilofoundation/regression Authors
// Copyright 2019 smilofoundation/regression Authors
// Copyright 2017 AMIS Technologies
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package genesis

import (
	"encoding/json"
	"errors"
	"go-smilo/src/blockchain/smilobft/core"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*genesisSpecMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SmiloGenesis) MarshalJSON() ([]byte, error) {
	type SmiloGenesis struct {
		Config     *SmiloChainConfig                                `json:"config"`
		Nonce      math.HexOrDecimal64                              `json:"nonce"`
		Timestamp  math.HexOrDecimal64                              `json:"timestamp"`
		ExtraData  hexutil.Bytes                                    `json:"extraData"`
		GasLimit   math.HexOrDecimal64                              `json:"gasLimit"   gencodec:"required"`
		Difficulty *math.HexOrDecimal256                            `json:"difficulty" gencodec:"required"`
		Mixhash    common.Hash                                      `json:"mixHash"`
		Coinbase   common.Address                                   `json:"coinbase"`
		Alloc      map[common.UnprefixedAddress]core.GenesisAccount `json:"alloc"      gencodec:"required"`
		Number     math.HexOrDecimal64                              `json:"number"`
		GasUsed    math.HexOrDecimal64                              `json:"gasUsed"`
		ParentHash common.Hash                                      `json:"parentHash"`
	}
	var enc SmiloGenesis
	enc.Config = s.Config
	enc.Nonce = math.HexOrDecimal64(s.Nonce)
	enc.Timestamp = math.HexOrDecimal64(s.Timestamp)
	enc.ExtraData = s.ExtraData
	enc.GasLimit = math.HexOrDecimal64(s.GasLimit)
	enc.Difficulty = (*math.HexOrDecimal256)(s.Difficulty)
	enc.Mixhash = s.Mixhash
	enc.Coinbase = s.Coinbase
	if s.Alloc != nil {
		enc.Alloc = make(map[common.UnprefixedAddress]core.GenesisAccount, len(s.Alloc))
		for k, v := range s.Alloc {
			enc.Alloc[common.UnprefixedAddress(k)] = v
		}
	}
	enc.Number = math.HexOrDecimal64(s.Number)
	enc.GasUsed = math.HexOrDecimal64(s.GasUsed)
	enc.ParentHash = s.ParentHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SmiloGenesis) UnmarshalJSON(input []byte) error {
	type SmiloGenesis struct {
		Config     *SmiloChainConfig                                `json:"config"`
		Nonce      *math.HexOrDecimal64                             `json:"nonce"`
		Timestamp  *math.HexOrDecimal64                             `json:"timestamp"`
		ExtraData  *hexutil.Bytes                                   `json:"extraData"`
		GasLimit   *math.HexOrDecimal64                             `json:"gasLimit"   gencodec:"required"`
		Difficulty *math.HexOrDecimal256                            `json:"difficulty" gencodec:"required"`
		Mixhash    *common.Hash                                     `json:"mixHash"`
		Coinbase   *common.Address                                  `json:"coinbase"`
		Alloc      map[common.UnprefixedAddress]core.GenesisAccount `json:"alloc"      gencodec:"required"`
		Number     *math.HexOrDecimal64                             `json:"number"`
		GasUsed    *math.HexOrDecimal64                             `json:"gasUsed"`
		ParentHash *common.Hash                                     `json:"parentHash"`
	}
	var dec SmiloGenesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Config != nil {
		s.Config = dec.Config
	}
	if dec.Nonce != nil {
		s.Nonce = uint64(*dec.Nonce)
	}
	if dec.Timestamp != nil {
		s.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.ExtraData != nil {
		s.ExtraData = *dec.ExtraData
	}
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for SmiloGenesis")
	}
	s.GasLimit = uint64(*dec.GasLimit)
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for SmiloGenesis")
	}
	s.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Mixhash != nil {
		s.Mixhash = *dec.Mixhash
	}
	if dec.Coinbase != nil {
		s.Coinbase = *dec.Coinbase
	}
	if dec.Alloc == nil {
		return errors.New("missing required field 'alloc' for SmiloGenesis")
	}
	s.Alloc = make(core.GenesisAlloc, len(dec.Alloc))
	for k, v := range dec.Alloc {
		s.Alloc[common.Address(k)] = v
	}
	if dec.Number != nil {
		s.Number = uint64(*dec.Number)
	}
	if dec.GasUsed != nil {
		s.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.ParentHash != nil {
		s.ParentHash = *dec.ParentHash
	}
	return nil
}
